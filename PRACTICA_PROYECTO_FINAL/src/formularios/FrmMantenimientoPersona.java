/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package formularios;

import javax.swing.JOptionPane;

import archivo.*;
import entidades.Persona;
import general.Validacion;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vr
 */
public class FrmMantenimientoPersona extends javax.swing.JFrame {

    /**
     * Creates new form FrmMantenimientoPersona
     */
    public FrmMantenimientoPersona() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfDescripcion = new javax.swing.JTextField();
        cbTipo = new javax.swing.JComboBox();
        bConsultar = new javax.swing.JButton();
        bIngresar = new javax.swing.JButton();
        bEditar = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        spResultado = new javax.swing.JScrollPane();
        tResultado = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tfDescripcion.setEditable(false);

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TODOS", "CÉDULA", "NOMBRES", "APELLIDOS", "EDAD" }));
        cbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoActionPerformed(evt);
            }
        });

        bConsultar.setText("CONSULTAR");
        bConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConsultarActionPerformed(evt);
            }
        });

        bIngresar.setText("INGRESAR");
        bIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bIngresarActionPerformed(evt);
            }
        });

        bEditar.setText("EDITAR");
        bEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditarActionPerformed(evt);
            }
        });

        bEliminar.setText("ELIMINAR");
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        tResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÉDULA", "NOMBRES", "APELLIDOS", "EDAD"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spResultado.setViewportView(tResultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bIngresar)
                                .addGap(53, 53, 53)
                                .addComponent(bEditar)
                                .addGap(46, 46, 46)
                                .addComponent(bEliminar))
                            .addComponent(spResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bConsultar)
                    .addComponent(tfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(spResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bIngresar)
                    .addComponent(bEditar)
                    .addComponent(bEliminar))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bIngresarActionPerformed
        // TODO add your handling code here:
        FrmIngresoPersona frm = new FrmIngresoPersona();
        frm.setVisible(true);
    }//GEN-LAST:event_bIngresarActionPerformed

    
    private boolean formularioValido(){
        String tipo = String.valueOf(cbTipo.getSelectedItem());
        String descripcion = tfDescripcion.getText();
        if(!tipo.equals("TODOS") && descripcion.equals("")){
            JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripción",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(tipo.equals("EDAD")){
            
            try{
                Integer.parseInt(descripcion);
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Para la edad debe ingresar un número",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }    
        }
        return true;
    }
    
    public void consultarRegistros(){
        if(formularioValido()){
            try{
                ArrayList<Persona> personas = Archivo.obtener_registros();
                ArrayList<Persona> resultado = new ArrayList<Persona>();
                String tipo = String.valueOf(cbTipo.getSelectedItem());
                String descripcion = tfDescripcion.getText();
                
                if(tipo.equals("TODOS")){
                    resultado = personas;                
                }else{
                    for (Persona p:personas) {
                        if(tipo.equals("CÉDULA") && 
                                p.getCedula().contains(descripcion)){
                            resultado.add(p);
                        }else if(tipo.equals("NOMBRES") && 
                                p.getNombres().toUpperCase().contains(descripcion.toUpperCase())){
                            resultado.add(p);
                        }
                    }                
                }
                
                DefaultTableModel dtm = (DefaultTableModel)tResultado.getModel();
                dtm.setRowCount(0);
                for (Persona p:resultado) {
                    Vector fila = new Vector();
                    fila.add(p.getCedula());
                    fila.add(p.getNombres());
                    fila.add(p.getApellidos());
                    fila.add(p.getEdad());
                    dtm.addRow(fila);
                }
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Ocurrió un error en la consulta",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void bConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConsultarActionPerformed
        // TODO add your handling code here:
        consultarRegistros();
    }//GEN-LAST:event_bConsultarActionPerformed

    private void cbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoActionPerformed
        // TODO add your handling code here:
        String tipo = String.valueOf(cbTipo.getSelectedItem());
        
        if(!tipo.equals("TODOS"))
            tfDescripcion.setEditable(true);
        else if(tipo.equals("TODOS"))
            tfDescripcion.setEditable(false);
        
        tfDescripcion.setText("");
    }//GEN-LAST:event_cbTipoActionPerformed

    public boolean seleccionEliminacionValida(){
        if(tResultado.getSelectedRowCount()==0){
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar mínimo un registro a eliminar",
                    "Eliminación",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }        
        
        if (JOptionPane.showConfirmDialog(null, "Desea Eliminar el Registro?", "Eliminar", JOptionPane.YES_NO_OPTION) 
                == JOptionPane.YES_OPTION)                
            return true;
        else
            return false;
    }
    
    
    public boolean seleccionEdicionValida(){
        
        if(tResultado.getSelectedRowCount()!=1){
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un registro a editar",
                    "Edición",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;    
    }
    
    private void bEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditarActionPerformed
        // TODO add your handling code here:
        if(seleccionEdicionValida()){
            int fila = tResultado.getSelectedRow();
            String cedula = String.valueOf(tResultado.getValueAt(fila,0));
            boolean encontrado = false;
            Persona pEncontrado = null;
            try{
                ArrayList<Persona> personas = Archivo.obtener_registros();
                for (Persona p:personas) {
                    if(p.getCedula().equals(cedula)){
                        encontrado = true;
                        pEncontrado = p;
                        break;
                    }                    
                }
                if(encontrado){
                    FrmEdicionPersona frm = new FrmEdicionPersona(pEncontrado,this);
                    frm.setVisible(true);                
                }else{
                     JOptionPane.showMessageDialog(this,
                    "El registro a editar ya no existe",
                    "Edición",
                    JOptionPane.ERROR_MESSAGE);
                }
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Ocurrió un error al consultar el archivo",
                    "Edición",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_bEditarActionPerformed

    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        // TODO add your handling code here:
        
        if(seleccionEliminacionValida()){      
            int[] rows = tResultado.getSelectedRows();
            ArrayList<Persona> eliminados= new ArrayList<Persona>();             
            for (int i = 0; i < rows.length; i++) {                
                Persona p = new Persona();
                p.setCedula(String.valueOf(tResultado.getValueAt(rows[i],0)));
                eliminados.add(p);
            }
            try{
                
                ArrayList<Persona> registros = Archivo.obtener_registros();
                for (int i = 0; i < eliminados.size(); i++)                   
                    registros.remove(Validacion.existePersona(registros, eliminados.get(i)));  
                
                if(Archivo.actualizar_registros(registros)){
                    JOptionPane.showMessageDialog(this,
                    "Se realizó la eliminación correctamente",
                    "Eliminación",
                    JOptionPane.ERROR_MESSAGE);
                    consultarRegistros();
                }else{
                    JOptionPane.showMessageDialog(this,
                    "Ocurrió un erro en la eliminación",
                    "Eliminación",
                    JOptionPane.ERROR_MESSAGE);
                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Ocurrió un error al consultar el archivo",
                    "Eliminación",
                    JOptionPane.ERROR_MESSAGE);            
            }
        }
    }//GEN-LAST:event_bEliminarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bConsultar;
    private javax.swing.JButton bEditar;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bIngresar;
    private javax.swing.JComboBox cbTipo;
    private javax.swing.JScrollPane spResultado;
    private javax.swing.JTable tResultado;
    private javax.swing.JTextField tfDescripcion;
    // End of variables declaration//GEN-END:variables
}
